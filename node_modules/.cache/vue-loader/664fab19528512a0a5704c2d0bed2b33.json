{"remainingRequest":"C:\\web2019\\2-XM\\demo\\scaffolding\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\web2019\\2-XM\\demo\\scaffolding\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\web2019\\2-XM\\demo\\scaffolding\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\web2019\\2-XM\\demo\\scaffolding\\src\\views\\Register.vue?vue&type=template&id=63ae9146&scoped=true&","dependencies":[{"path":"C:\\web2019\\2-XM\\demo\\scaffolding\\src\\views\\Register.vue","mtime":1648546858982},{"path":"C:\\web2019\\2-XM\\demo\\scaffolding\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1640758910000},{"path":"C:\\web2019\\2-XM\\demo\\scaffolding\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1640758932000},{"path":"C:\\web2019\\2-XM\\demo\\scaffolding\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1640758910000},{"path":"C:\\web2019\\2-XM\\demo\\scaffolding\\node_modules\\vue-loader\\lib\\index.js","mtime":1640758926000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}